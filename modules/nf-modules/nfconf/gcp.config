def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
    
docker {
  runOptions = "--gpus all"
  enabled = true
  userEmulation = true
}

params {
 citest=false
 repoDir='/seqprg'
 cloudprj = ''
 version = 'latest'
 registry = ""
}

google {
  region  = 'us-central1'
  project = "${params.cloudprj}"
  lifeSciences.bootDiskSize = 500.GB
  lifeSciences.debug = true
  lifeSciences.sshDaemon = true
  batch.bootDiskSize = 500.GB
  batch.debug = true
  batch.sshDaemon = true
}
executor {
  queueSize=50
  name='google-lifesciences'
  submitRateLimit='10sec'
  pollInterval='30 sec'
}

process {
  executor = 'google-lifesciences' //'google-batch'
  maxRetries    = 3
  maxErrors     = '-1'
  maxForks = 50
  cache = 'lenient'
  withLabel: augustus {
    errorStrategy  = 'ignore'
    container = "${params.registry}/flag_augustus:${params.version}"
    machineType='e2-standard-32'
    disk='800 GB'
  }
  withLabel: basic {
    errorStrategy  = 'ignore'
    container = "${params.registry}/flag_cbbasic:${params.version}"
    machineType='e2-highmem-4'
    disk='2000 GB'
  }
  withLabel: entap {
    errorStrategy  = 'ignore'
    container = "${params.registry}/flag_entap:${params.version}"
    machineType='e2-standard-16'
    disk='1000 GB'
  }
  withLabel: evm {
    errorStrategy  = 'ignore'
    machineType='n2d-highmem-48'
    container = "${params.registry}/flag_combinefilter:${params.version}"
    disk='1000 GB'
  }
  withLabel: exonerate_p2g {
    errorStrategy  = 'ignore'
    container = "${params.registry}/flag_exonerate:${params.version}"
    machineType='n2d-highmem-96'
    disk='200 GB'
  }
  withLabel: formatting {
    errorStrategy  = 'ignore'
    machineType='e2-highmem-4'
    container = "${params.registry}/flag_cbbasic:${params.version}"
    disk='3000 GB'
  }
  withLabel: genome2protein {
    errorStrategy  = 'ignore'
    container = "${params.registry}/flag_ncbiclibraries:${params.version}"
    machineType='n2d-highmem-48'
    disk='800 GB'
  }
    withLabel: helixer {
    errorStrategy  = 'ignore'
    container = "${params.registry}/flag_helixer:${params.version}"
    containerOptions="--gpus all"
    accelerator=[request: 1, type: 'nvidia-tesla-a100']
    machineType='a2-highgpu-1g'
    disk='300 GB'
  }
  withLabel: liftoff {
    errorStrategy  = 'ignore'
    container = "${params.registry}/flag_liftoff:${params.version}"
    machineType='e2-standard-16'
    disk='400 GB'
  }
  withLabel: ncbiclibraries {
    errorStrategy  = 'ignore'
    container = "${params.registry}/flag_ncbiclibraries:${params.version}"
    machineType='n2d-highmem-48'
    disk='1200 GB'
  }
  withLabel: ncbitools {
    errorStrategy  = 'ignore'
    container = "${params.registry}/flag_ncbitools:${params.version}"
    machineType='e2-highcpu-2'
    disk='2000 GB'
  }
  withLabel: pasa {
    errorStrategy  = 'ignore'
    container = "${params.registry}/flag_pasa:${params.version}"
    machineType='e2-standard-16'
    disk='300 GB'
  }
  withLabel: prosplign {
    errorStrategy  = 'ignore'
    container = "${params.registry}/flag_ncbiclibraries:${params.version}"
    machineType='n2d-highmem-96'
    disk='200 GB'
  }
  withLabel: splign {
    errorStrategy  = 'ignore'
    container = "${params.registry}/flag_ncbiclibraries:${params.version}"
    machineType='e2-standard-4'
    disk='1000 GB'
  }
  withLabel: tetools {
    errorStrategy  = 'ignore'
    container = "${params.registry}/flag_tetools:${params.version}"
    machineType='e2-standard-16'
    disk='300 GB'
  }
  withLabel: transdecoder {
    errorStrategy  = 'ignore'
    container = "${params.registry}/flag_transdecoder:${params.version}"
    machineType='e2-standard-16'
    disk='1200 GB'
  }
  withLabel: trinity {
    errorStrategy  = 'ignore'
    container = "${params.registry}/flag_trinity:${params.version}"
    machineType='n2d-standard-96'
    disk='2500 GB'
  }
}


trace {
  enabled = true
  file = 'pipeline_trace.txt'
  field = 'task_id,native_id,process,name,status,exit,submit,start,complete,duration,realtime'
}

timeline {
  enabled = true
  file = 'timeline.html'
}

report {
  enabled = true
  file = 'report.html'
}
dag {
    enabled = true
    file    = "pipeline_dag_${trace_timestamp}.svg"
}
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
